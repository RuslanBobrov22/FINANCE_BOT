from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from manage_of_db import create, add_value, choose_column, max_column, min_column, store, store_add, store_less, \
    data_filter, data_count, count_column
from config import *

storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=storage)


def get_keyboard():  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!')).add('—Å–æ–∑–¥–∞—Ç—å –æ–±–ª–∞—Å—Ç–∏').add('–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É') \
        .add('–º–∞–∫—Å–∏–º—É–º', '–º–∏–Ω–∏–º—É–º').add('–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ', '–æ—Å—Ç–∞—Ç–æ–∫').add('–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ') \
        .add('–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –¥–µ–Ω—å', '–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≤ –æ–±–ª–∞—Å—Ç–∏')
    return kb


def get_cancel():
    kb2 = ReplyKeyboardMarkup(resize_keyboard=True)
    kb2.add(KeyboardButton('/cancel'))
    return kb2


async def on_startup(_):  # –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    print('the bot strated')


class Client_state_group(StatesGroup):  # –∫–ª–∞—Å—Å—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    desc = State()
    value = State()


class Client_state_table(StatesGroup):
    table = State()


class Client_state_stat(StatesGroup):
    col = State()


class Client_state_max(StatesGroup):
    name = State()


class Client_state_min(StatesGroup):
    name_2 = State()


class Client_state_store(StatesGroup):
    store = State()


class Client_state_data(StatesGroup):
    data = State()


class Client_state_count_d(StatesGroup):
    data_c = State()


class Client_state_count_col(StatesGroup):
    data_c = State()


@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—ÇüñêÔ∏è! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –∫–æ—Ç–æ—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã')
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker='CAACAgIAAxkBAAEIhbxkMv6j1wE6DZTtjtsBwDSVoFRLWwACWg8AAsFkiUtoBn1ASv7hiC8E',
                           reply_markup=get_keyboard())


@dp.message_handler(commands=['menu'])
async def start_message(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–±–ª–∞—Å—Ç—å', reply_markup=get_keyboard())


@dp.message_handler(commands=['help'])
async def help_message(message: types.Message):
    await message.answer(TEXT_HELP,
                         parse_mode='HTML')


@dp.message_handler(commands=['cancel'], state='*')
async def cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await message.reply('–¢–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                        reply_markup=get_keyboard())

    await state.finish()


@dp.message_handler(Text(equals='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!', ignore_case=True), state=None)  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def start_work(message: types.Message):
    await Client_state_group.desc.set()
    await message.answer('–û–±–ª–∞—Å—Ç—å —Ç—Ä–∞—Ç',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='—Å–æ–∑–¥–∞—Ç—å –æ–±–ª–∞—Å—Ç–∏', ignore_case=True), state=None)
async def start_work(message: types.Message):
    await Client_state_table.table.set()
    await message.answer('–∑–∞–¥–∞—Ç—å –æ–±–ª–∞—Å—Ç–∏',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', ignore_case=True),
                    state=None)  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ Client_state_count_col
async def start_work(message: types.Message):
    await Client_state_stat.col.set()
    await message.answer('—Ä–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü)',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≤ –æ–±–ª–∞—Å—Ç–∏', ignore_case=True), state=None)  # —Å—É–º–º–∞ –≤ –æ–±–ª–∞—Å—Ç–∏
async def start_work(message: types.Message):
    await Client_state_count_col.data_c.set()
    await message.answer('–ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü)',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='–º–∞–∫—Å–∏–º—É–º', ignore_case=True), state=None)  # –º–∞–∫—Å–∏–º—É–º –≤ –æ–±–ª–∞—Å—Ç–∏
async def start_work(message: types.Message):
    await Client_state_max.name.set()
    await message.answer('—É–∑–Ω–∞—Ç—å –º–∞–∫—Å–∏–º—É–º (–Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü)',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='–º–∏–Ω–∏–º—É–º', ignore_case=True), state=None)  # –º–∏–Ω–∏–º—É–º –≤ –æ–±–ª–∞—Å—Ç–∏
async def start_work(message: types.Message):
    await Client_state_min.name_2.set()
    await message.answer('—É–∑–Ω–∞—Ç—å –º–∏–Ω–∏–º—É–º (–Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü)',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ', ignore_case=True), state=None)  # —Å—É–º–º–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é
# —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def start_work(message: types.Message):
    await Client_state_store.store.set()
    await message.answer('–Ω–∞–ø–∏—à–∏—Ç—É —Å—É–º–º—É –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª–æ–∂–∏—Ç—å—Å—è',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='–æ—Å—Ç–∞—Ç–æ–∫', ignore_case=True), state=None)  # –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç —Å—É–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start_work(message: types.Message):
    await message.answer(f'–≤–∞—à –æ—Å—Ç–∞—Ç–æ–∫ {store()}',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ', ignore_case=True), state=None)
async def start_work(message: types.Message):
    await Client_state_data.data.set()
    await message.answer(f'–Ω–∞–ø–∏—à–∏—Ç—É –¥–µ–Ω—å –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Ç—Ä–∞—Ç—É –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–µ—Å—è—Ü.–¥–µ–Ω—å',
                         reply_markup=get_cancel())


@dp.message_handler(Text(equals='–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –¥–µ–Ω—å', ignore_case=True), state=None)
async def start_work(message: types.Message):
    await Client_state_count_d.data_c.set()
    await message.answer(f'–Ω–∞–ø–∏—à–∏—Ç—É –¥–µ–Ω—å –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–µ—Å—è—Ü.–¥–µ–Ω—å',
                         reply_markup=get_cancel())


# –ü–ï–†–ï–ß–ò–°–õ–ï–ù–´ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ó–ù–ê–ß–ï–ù–ò–Ø –ò –û–ë–†–ê–©–ï–ù–ò–ï –ö SQLITE
@dp.message_handler(state=Client_state_count_d.data_c)
async def load_value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['data_c'] = message.text
    await message.answer(f'–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å {data_count(message.text)}')
    await state.finish()


@dp.message_handler(state=Client_state_data.data)
async def load_value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['data'] = message.text
    await message.answer(f'–æ–±—â–∞—è —Ç—Ä–∞—Ç–∞ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å {data_filter(message.text)}')
    await state.finish()


@dp.message_handler(state=Client_state_store.store)
async def load_value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['store'] = message.text
    store_add(message.text)
    await message.reply('–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!')
    await state.finish()


@dp.message_handler(state=Client_state_count_col.data_c)
async def load_value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['data_c'] = message.text
    await message.reply('–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!')
    await message.answer(f'–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ {count_column(message.text)}')
    await state.finish()


@dp.message_handler(state=Client_state_min.name_2)
async def load_value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name_2'] = message.text
    await message.reply('–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')
    await message.answer(text=min_column(message.text))

    await state.finish()


@dp.message_handler(state=Client_state_max.name)
async def load_value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.reply('–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')
    await message.answer(text=max_column(message.text))

    await state.finish()


@dp.message_handler(state=Client_state_stat.col)  # –≤—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã
async def load_value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['col'] = message.text
    await message.reply('–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')
    await message.answer(text=choose_column(message.text))

    await state.finish()


@dp.message_handler(state=Client_state_table.table)
async def load_value(message: types.Message, state: FSMContext):
    create(message.text.split())
    async with state.proxy() as data:
        data['table'] = message.text
    await message.reply('–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
    await message.answer('–°–ø–∞—Å–∏–±–æ ü§ì!')

    await state.finish()


@dp.message_handler(state=Client_state_group.desc)
async def load_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text

    await Client_state_group.next()
    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É')


@dp.message_handler(state=Client_state_group.value)
async def load_value(message: types.Message, state: FSMContext):
    flag = True
    async with state.proxy() as data:
        if store() - int(message.text) >= 0:
            store_less(int(message.text))
            data['value'] = message.text
        else:
            flag = False

    if flag:
        await message.reply('–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
        async with state.proxy() as data:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=data['desc'])
        async with state.proxy() as data:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=data['value'])
        add_value(data['desc'], data['value'])
        await message.answer('–°–ø–∞—Å–∏–±–æ!‚ò∫Ô∏è')
    else:
        await message.answer('–Ω–∞ —Å—á–µ—Ç—É –Ω–∞–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤(((')

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)